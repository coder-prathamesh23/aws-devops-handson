name: Deploy EC2 app with Terraform
on: 
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'ansible/**'
  workflow_dispatch:

env:
  TF_WORKING_DIR: ./terraform/ec2-instance

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: true

      - name: Terraform Init
        # Initializes a working directory containing Terraform configuration files
        id: init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        # Validates the Terraform configuration
        id: validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        # Generates an execution plan for Terraform changes
        id: plan
        run: |
          terraform plan -no-color -input=false \
             -var "aws_region=${{ vars.AWS_REGION }}" \
             -var "key_pair_name=${{ vars.EC2_KEY_PAIR_NAME }}" \
             -var "your_forked_repo_url=${{ vars.YOUR_FORKED_REPO_URL }}"
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Apply
        # Applies the planned changes to create/update infrastructure
        id: apply
        # This condition ensures `terraform apply` only runs on pushes to the 'main' branch.
        # In a real-world scenario, you might have manual approval steps here for production.
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
        run: |
          terraform apply -auto-approve -input=false \
             -var "aws_region=${{ vars.AWS_REGION }}" \
             -var "key_pair_name=${{ vars.EC2_KEY_PAIR_NAME }}" \
             -var "your_forked_repo_url=${{ vars.YOUR_FORKED_REPO_URL }}"
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Get EC2 Public IP
        id: get_ip
        run: |
          sleep 10 # Give AWS/Terraform a moment to ensure IP is assigned and state updated

          # Command to get the public IP.
          # 2>/dev/null redirects stderr (where the "No outputs found" warning goes) to null,
          # preventing it from being captured by the variable assignment.
          # -raw ensures only the value is returned, no newlines or other formatting.
          # Removed '-state=terraform.tfstate' as it's not strictly necessary when 'working-directory' is set,
          # and sometimes can cause issues if the runner's local state isn't exactly where it expects.
          EC2_PUBLIC_IP=$(terraform output -raw instance_public_ip 2>/dev/null)

          echo "Debug: Public IP extracted by 'Get EC2 Public IP' step (pre-check): '$EC2_PUBLIC_IP'"

          # Check if the extracted IP is empty
          if [ -z "$EC2_PUBLIC_IP" ]; then
            echo "Error: Public IP could not be found in Terraform outputs."
            echo "Please verify:"
            echo "  1. 'terraform/ec2-instance/outputs.tf' contains 'output \"instance_public_ip\"'."
            echo "  2. The 'Terraform Apply' step successfully created the EC2 instance and it has a public IP."
            exit 1 # Exit with an error if IP is empty
          fi

          # If IP is found, make it available as an output for subsequent steps
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "Debug: Final Public IP made available to workflow: $EC2_PUBLIC_IP"
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Setup SSH Key for Ansible
        # Create the .ssh directory and write the private key from GitHub Secrets
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ansible_key.pem
          chmod 600 ~/.ssh/ansible_key.pem
          echo "SSH key prepared."

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible python3-pip
          pip3 install boto3 # boto3 is needed for dynamic inventory if you were using it, good general practice
          echo "Ansible installed."

      - name: Wait for EC2 Instance to be Ready (SSH)
        # This is CRUCIAL. The instance needs time to boot and SSH service to start.
        # This loop tries to connect every 10 seconds for up to 5 minutes.
        run: |
          HOST_IP=${{ steps.get_ip.outputs.EC2_PUBLIC_IP }}
          MAX_RETRIES=30 # 30 retries * 10 seconds = 300 seconds (5 minutes)
          RETRY_INTERVAL=10 # seconds

          echo "Waiting for SSH on ${HOST_IP}..."
          for i in $(seq 1 $MAX_RETRIES); do
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/ansible_key.pem ec2-user@$HOST_IP exit 0
            if [ $? -eq 0 ]; then
              echo "SSH connection successful."
              break
            else
              echo "Attempt $i/$MAX_RETRIES: SSH not ready. Retrying in $RETRY_INTERVAL seconds..."
              sleep $RETRY_INTERVAL
            fi
            if [ $i -eq $MAX_RETRIES ]; then
              echo "Max retries reached. SSH failed to connect."
              exit 1
            fi
          done
        env:
          # Pass YOUR_FORKED_REPO_URL to the Ansible environment so it can be used in playbook vars
          YOUR_FORKED_REPO_URL: ${{ vars.YOUR_FORKED_REPO_URL }}

      - name: Run Ansible Playbook
        # Execute the playbook against the dynamically created instance
        run: |
          ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \
            -i "${{ steps.get_ip.outputs.EC2_PUBLIC_IP }}," \
            --private-key ~/.ssh/ansible_key.pem \
            ansible/playbook.yml
        env:
          # Pass YOUR_FORKED_REPO_URL to the Ansible environment so it can be used in playbook vars
          YOUR_FORKED_REPO_URL: ${{ vars.YOUR_FORKED_REPO_URL }}
